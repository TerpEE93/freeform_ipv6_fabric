{% set vrf_vlan = property_sets.get('vrf_vlan', {}) %}
{% set prot_prop = property_sets.get('protocol_properties', {} ) %}
{% set sys_prop = property_sets.get('custom_sys_properties', {} ) %}
{% set ns = namespace ( ) %}
{% set ns.neighbor_asn = None %}
{% set ns.neighbor_loopback = None %}
{% set ns.dev_vlan_list = [ ] %}
{% set ns.global_vlan_list = [ ] %}
{% set ns.nameserver_list = [ ] %}
{% for server in sys_prop.dns.servers %}
    {{ns.nameserver_list.append( server ) or '' }}
{% endfor %}
{% set vlan_list = [] %}
{# Compute a Junos-friendly loopback address from what resource generator created #}
{% set loopback_prefix = function.get_resource_value(resources, 'loopback_assignments', 'fabric_resources', 'devices') %}
{% if loopback_prefix != '' %}
    {% if loopback_prefix|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff' 
       or loopback_prefix|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe' %}
        {% set loopback_ipv6 = loopback_prefix|to_ip %}
    {% else %}
        {% set loopback_ipv6 = loopback_prefix|replace( '::/', '::1/')|to_ip %}
    {% endif %}
{% endif %}
{% set local_asn = function.get_resource_value(resources, 'asn_assignments', 'fabric_resources', 'devices') %}
{% for vlan in vrf_vlan.vlans %}
    {{ ns.global_vlan_list.append(vlan['vlan_name']) or "" }}
{%- endfor %}
{% for interface_name, iface in interfaces.iteritems() %}
    {% if 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}
        {% for vlan in ns.global_vlan_list %}
            {% if vlan in iface.link_tags %}
                {{ ns.dev_vlan_list.append(vlan) or '' }}
            {% endif %}
        {% endfor%}
    {% endif %}
{% endfor %}

replace: protocols {
    router-advertisement {
{% for interface_name, iface in interfaces.iteritems() %}
    {% if iface['ipv6_address'] and iface['ipv6_prefixlen'] %}
        interface {{ interface_name }}.0 {
            max-advertisement-interval {{ prot_prop.router_advertisement.max_adv_int }};
            min-advertisement-interval {{ prot_prop.router_advertisement.min_adv_int }};
        }
    {% endif %}
{% endfor %}
{% if ns.dev_vlan_list %}
    {% for vlan in vrf_vlan.vlans %}
        {% if vlan['vlan_name'] in ns.dev_vlan_list and
              vlan['irb_gateway6'] %}
            {% set irb_prefix = [ vlan['irb_gateway6'], vlan['ipv6_prefix_len'] ]|join('/')|to_network %}
        interface irb.{{ vlan['vlan_id'] }} {
            max-advertisement-interval {{ prot_prop.router_advertisement.max_adv_int }};
            min-advertisement-interval {{ prot_prop.router_advertisement.min_adv_int }};
                    {% for server in ns.nameserver_list %}
            dns-server-address {{ server }} {
                lifetime {{ prot_prop.router_advertisement.rdnss_lifetime }};
            }
                    {% endfor %}
            prefix {{ irb_prefix }}/{{ vlan['ipv6_prefix_len'] }} {
                preferred-lifetime {{ prot_prop.router_advertisement.prefix_pref_lifetime }};
                valid-lifetime {{ prot_prop.router_advertisement.prefix_val_lifetime }};
            }
        }
        {% endif %}
    {% endfor %}
{% endif %}
    }
    l2-learning {
        telemetry {
            enable-remote-entries;
        }
    }
    lldp {
        port-id-subtype interface-name;
        port-description-type interface-description;
        neighbour-port-info-display port-id;
        interface all;
    }
{% if 'sflow' in sys_prop and sys_prop.sflow.enabled and 'sflow' in prot_prop %}
    sflow {
        polling-interval {{ prot_prop.sflow.polling_interval }};
    {% if 'mgt_prefix_v6' in sys_prop and sys_prop.mgt_prefix_v6 != '' and
          'source_v6_supported' in prot_prop.sflow and
          'prot_prop.sflow.source_v6_supported' %}
        {% set mgt_prefix_v6 = sys_prop.mgt_prefix_v6|to_network %}
        source-ip inet6 {{ mgt_prefix_v6 }}{{ management_ip }};
    {% else %}
        source-ip {{ management_ip }};
    {% endif %}
        sample-rate {
            ingress {{ prot_prop.sflow.ingress_sample_rate }};
            egress {{ prot_prop.sflow.egress_sample_rate }};
        }
    {% for collector in sys_prop.sflow.collectors %}
        collector {{ collector['host_ip'] }} {
            udp-port {{ collector['udp_port'] }};
        }
    {% endfor %}
    {% for interface_name, iface in interfaces.iteritems() %}
        {% if iface['role'] == 'external' and iface['if_type'] == 'ethernet' %}
        interfaces {{ iface['name'] }}.0;
        {% endif %}
    {% endfor %}
    }
{% endif %}
    rstp {
        bridge-priority 0;
        bpdu-block-on-edge;
{% for interface_name, iface in interfaces.iteritems() %}
    {% if 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}
        interface {{ interface_name }} {
            edge;
        }
    {% endif %}
{% endfor %}
    }
    bgp {
        log-updown;
        graceful-restart;
{% if 'leaf' in system_tags %}
        group l3clos-l {
            type external;
            family inet6 {
                unicast;
            }
            export ( LEAF_TO_SPINE_FABRIC_OUT && BGP-AOS-Policy );
            multipath {
                multiple-as;
            }
            bfd-liveness-detection {
                minimum-interval {{ prot_prop.bgp.bfd_min_int }};
                multiplier {{ prot_prop.bgp.bfd_multiplier }};
            }
            vpn-apply-export;
    {% for interface_name, iface in interfaces.iteritems() %}
        {% if not iface.get('ipv6_address') %}
            {% continue %}
        {% endif %}
        {% set neighbor_interfaces = iface.get('neighbor_interfaces', []) %}
        {% for neighbor_interface in neighbor_interfaces if neighbor_interface.get('ipv6_address') %}
		    {% set ns.neighbor_asn = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'asn_assignments', 'fabric_resources', 'devices') %}
            neighbor {{ neighbor_interface.ipv6_address }} {
                peer-as {{ ns.neighbor_asn }};
            }
        {% endfor %}
    {% endfor %}
        }
        group l3clos-l-evpn {
            type external;
            multipath {
                multiple-as;
            }
            multihop {
                no-nexthop-change;
                ttl 1;
            }
            family evpn {
                signaling {
                    loops 2;
                }
            }
            bfd-liveness-detection {
                minimum-interval {{ prot_prop.bgp.bfd_min_int }};
                multiplier {{ prot_prop.bgp.bfd_multiplier }};
            }
            vpn-apply-export;
            local-address {{ loopback_ipv6 }};
            export ( LEAF_TO_SPINE_EVPN_OUT && EVPN_EXPORT )
    {% for interface_name, iface in interfaces.iteritems() %}
        {% if not iface.get('ipv6_address') %}
            {% continue %}
        {% endif %}
        {% set neighbor_interfaces = iface.get('neighbor_interfaces', []) %}
        {% for neighbor_interface in neighbor_interfaces if neighbor_interface.get('ipv6_address') %}
		    {% set ns.neighbor_asn = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'asn_assignments', 'fabric_resources', 'devices') %}
		    {% set ns.neighbor_loopback = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'loopback_assignments', 'fabric_resources', 'devices') %}
                {% if ns.neighbor_loopback|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'
                   or ns.neighbor_loopback|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe' %}
                    {% set peer_ipv6 = ns.neighbor_loopback|to_ip %}
                {% else %}
                    {% set peer_ipv6 = ns.neighbor_loopback|replace( '::/', '::1/' )|to_ip %}
                {% endif %}
            neighbor {{ peer_ipv6 }} {
                peer-as {{ ns.neighbor_asn }};
            }
        {% endfor %}
    {% endfor %}
        }
{% endif %}
{% if 'spine' in system_tags %}
        group l3clos-s {
            type external;
            family inet6 {
                unicast;
            }
            export ( SPINE_TO_LEAF_FABRIC_OUT && BGP-AOS-Policy );
            multipath {
                multiple-as;
            }
            bfd-liveness-detection {
                minimum-interval {{ prot_prop.bgp.bfd_min_int }};
                multiplier {{ prot_prop.bgp.bfd_multiplier }};
            }
            vpn-apply-export;
    {% for interface_name, iface in interfaces.iteritems() %}
        {% if not iface.get('ipv6_address') %}
            {% continue %}
        {% endif %}
        {% set neighbor_interfaces = iface.get('neighbor_interfaces', []) %}
        {% for neighbor_interface in neighbor_interfaces if neighbor_interface.get('ipv6_address') %}
		    {% set ns.neighbor_asn = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'asn_assignments', 'fabric_resources', 'devices') %}
            neighbor {{ neighbor_interface.ipv6_address }} {
                peer-as {{ ns.neighbor_asn }};
            }
        {% endfor %}
    {% endfor %}
        }
        group l3clos-s-evpn {
            type external;
            multipath {
                multiple-as;
            }
            multihop {
                no-nexthop-change;
                ttl 1;
            }
            family evpn {
                signaling;
            }
            bfd-liveness-detection {
                minimum-interval {{ prot_prop.bgp.bfd_min_int }};
                multiplier {{ prot_prop.bgp.bfd_multiplier }};
            }
            vpn-apply-export;
            local-address {{ loopback_ipv6 }};
            export ( LEAF_TO_SPINE_EVPN_OUT )
    {% for interface_name, iface in interfaces.iteritems() %}
        {% if not iface.get('ipv6_address') %}
            {% continue %}
        {% endif %}
        {% set neighbor_interfaces = iface.get('neighbor_interfaces', []) %}
        {% for neighbor_interface in neighbor_interfaces if neighbor_interface.get('ipv6_address') %}
		    {% set ns.neighbor_asn = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'asn_assignments', 'fabric_resources', 'devices') %}
		    {% set ns.neighbor_loopback = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'loopback_assignments', 'fabric_resources', 'devices') %}
                {% if ns.neighbor_loopback|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'
                   or ns.neighbor_loopback|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe' %}
                    {% set peer_ipv6 = ns.neighbor_loopback|to_ip %}
                {% else %}
                    {% set peer_ipv6 = ns.neighbor_loopback|replace( '::/', '::1/' )|to_ip %}
                {% endif %}
            neighbor {{ peer_ipv6 }} {
                peer-as {{ ns.neighbor_asn }};
            }
        {% endfor %}
    {% endfor %}
        }
{% endif %}
    }
}
{# EOF #}