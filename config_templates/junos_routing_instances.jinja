{% set vrf_vlan = property_sets.get('vrf_vlan', {} ) %}
{% set sys_prop = property_sets.get('custom_sys_properties', {} ) %}
{% set prot_prop = property_sets.get('protocol_properties', {} ) %}
{% set mgt_vrf = sys_prop.mgt_vrf if 'mgt_vrf' in sys_prop else 'mgmt_junos' %}
{# We'll use namespaces to track BGP/OSPF/Static across VLANs in a VRF #}
{% set ns = namespace( ) %}
{% set ns.is_bgp = false %}
{% set ns.is_ospf = false %}
{% set ns.is_ospf3 = false %}
{% set ns.is_static_v4 = false %}
{% set ns.is_static_v6 = false %}
routing-instances {
{# The heavy lifting happens on the leaf devices #}
{% if 'leaf' in system_tags %}
    {% set dev_router_id = function.get_resource_value(resources, 'router_id', 'fabric_resources', 'devices') %}
    {% set local_asn = function.get_resource_value(resources, 'asn_assignments', 'fabric_resources', 'devices') %}
    {% set rd = dev_router_id|to_ip %}
    {# Because we already created the namespace above... #}
    {% set ns.dev_vlan_list = [] %}
    {% set vlan_list = [] %}

    {% for interface_name, iface in interfaces.items() %}
        {% if 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}
            {% for vlan in vrf_vlan.vlans %}
                {% if vlan['vlan_name'] in iface.link_tags %}
                    {{ ns.dev_vlan_list.append(vlan['vlan_name']) or "" }}
                {%- endif %}
            {% endfor%}
        {% endif %}
    {% endfor %}

    {% if ns.dev_vlan_list %}
    replace: VSWITCH {
        instance-type mac-vrf;
        protocols {
            evpn {
                vni-options {
        {% for vlan in vrf_vlan.vlans %}
            {% if vlan['vlan_name'] in ns.dev_vlan_list %}
                    vni {{ vlan['vxlan_vni'] }} {
                        vrf-target target:{{ vlan['vxlan_vni'] }}L:1;
                    }
            {% endif %}
        {% endfor %}
                }
                encapsulation vxlan;
                default-gateway no-gateway-community;
                extended-vni-list all;
            }
        }
        vtep-source-interface lo0.0 inet6;
        service-type vlan-aware;
        {% for interface_name, iface in interfaces.items() %}
            {% if 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}
        interface {{ interface_name }}.0;
            {% endif %}
        {% endfor %}
        route-distinguisher {{ rd }}:65534;
        vrf-target {
            target:100:100;
        }
        vlans {
        {% for vlan in vrf_vlan.vlans %}
            {% if vlan['vlan_name'] in ns.dev_vlan_list %}
            {{ vlan['vlan_name'] }} {
                vlan-id {{ vlan['vlan_id'] }};
                vxlan {
                    vni {{ vlan['vxlan_vni'] }};
                }
                {% if vlan['irb_gateway4'] != "" or vlan['irb_gateway6'] != "" %}
                l3-interface irb.{{ vlan['vlan_id'] }};
                {% endif %}
            }
            {% endif %}
        {% endfor %}
        }
    }
    {% endif %}

    {% for ri in vrf_vlan.vrfs %}
        {% set ri_loopback = [ 'lo0.', ri['lo0_unit'] ]|join %}
        {% set ns.is_bgp = false %}
        {% set ns.is_ospf = false %}
        {% set ns.is_ospf3 = false %}
        {% set ns.is_static_v4 = false %}
        {% set ns.is_static_v6 = false %}
        {% set ns.ri_vlan_list = [ ] %}
        {% set ns.ri_dev_vlan_list = [ ] %}
        {% for vlan in vrf_vlan.vlans %}
            {% if vlan['member_of'] == ri['vrf_name'] %}
                {{ ns.ri_vlan_list.append( vlan ) or '' }}
                {% if vlan['vlan_name'] in ns.dev_vlan_list %}
                    {{ ns.ri_dev_vlan_list.append( vlan ) or '' }}
                    {% if vlan['is_bgp'] %}{% set ns.is_bgp = true %}{% endif %}
                    {% if vlan['is_ospf'] and vlan['irb_gateway4'] != '' %}{% set ns.is_ospf = true %}{% endif %}
                    {% if vlan['is_ospf'] and vlan['irb_gateway6'] != '' %}{% set ns.is_ospf3 = true %}{% endif %}
                    {% if vlan['is_static'] and vlan['peer_ipv4'] != '' %}{% set ns.is_static_v4 = true %}{% endif %}
                    {% if vlan['is_static'] and vlan['peer_ipv6'] != '' %}{% set ns.is_static_v6 = true %}{% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}

    replace: {{ ri['vrf_name'] }} {
        instance-type vrf;
        {% if ri['lo0_unit'] %}
        interface {{ ri_loopback }};
        {% endif %}
        {% for vlan in vrf_vlan.vlans %}
            {% if vlan['vlan_name'] in ns.dev_vlan_list and 
                  vlan['member_of'] == ri['vrf_name'] %}
                {% if vlan['irb_gateway4'] != "" or vlan['irb_gateway6'] != "" %}
        interface irb.{{ vlan['vlan_id'] }};
                {% endif %}
            {% endif %}
        {% endfor %}
        route-distinguisher {{ rd }}:{{ ri['vrf_vni'] }};
        vrf-target target:{{ ri['vrf_vni'] }}:1;
        vrf-table-label;
        {% if 'dhcp_server' in system_tags %}
        access {
            address-assignment {
            {% for vlan in vrf_vlan.vlans %}
                {% if vlan['irb_gateway4'] != '' %}
                    {% set prefix_v4 = [ vlan['irb_gateway4'], vlan['ipv4_prefix_len'] ]|join('/')|to_network %}
                pool {{ vlan['vlan_name'] }}_v4_POOL {
                    family inet {
                        network {{ prefix_v4 }}/{{ vlan['ipv4_prefix_len'] }};
                    {% if vlan['dhcpv4_low'] != '' and vlan['dhcpv4_high'] != '' %}
                        range CLIENTS {
                            low {{ vlan['dhcpv4_low'] }};
                            high {{ vlan['dhcpv4_high'] }};
                        }
                    {% endif %}
                        dhcp-attributes {
                            router {
                                {{ vlan['irb_gateway4'] }};
                            }
                        }
                    }
                }
                {% endif %}
                {% if vlan['irb_gateway6'] != '' %}
                    {% set prefix_v6 = [ vlan['irb_gateway6'], vlan['ipv6_prefix_len'] ]|join('/')|to_network %}
                pool {{ vlan['vlan_name'] }}_v6_POOL {
                    family inet6 {
                        prefix {{ prefix_v6 }}/{{ vlan['ipv6_prefix_len'] }};
                    {% if vlan['dhcpv6_low'] != '' and vlan['dhcpv6_high'] != '' %}
                        range CLIENTS {
                            low {{ vlan['dhcpv6_low'] }}/128;
                            high {{ vlan['dhcpv6_high'] }}/128;
                        }
                    {% endif %}
                    }
                }
                {% endif %}
            {% endfor %}
            }
        }
        system {
            services {
                dhcp-local-server {
            {% for vlan in vrf_vlan.vlans %}
                {% if vlan['member_of'] == ri['vrf_name'] and 
                          vlan['irb_gateway4'] != '' %}
                        group {{ vlan['vlan_name'] }}_DHCPv4_GROUP {
                            interface irb.{{ vlan['vlan_id'] }};
                        }
                {% endif %}
            {% endfor %}
                    dhcpv6 {
                        overrides {
                            interface-client-limit 200;
                        }
            {% for vlan in vrf_vlan.vlans %}
                {% if vlan['member_of'] == ri['vrf_name'] and 
                          vlan['irb_gateway6'] != '' %}
                        group {{ vlan['vlan_name'] }}_DHCPv6_GROUP {
                            interface irb.{{ vlan['vlan_id'] }};
                        }
                {% endif %}
            {% endfor %}
                    }
                }
            }
        }
        {% endif %}
        {% if (ri['dhcp4_mode'] == 'relay' or ri['dhcp6_mode'] == 'relay') and
            not ('dhcp_server' in system_tags) %}
        forwarding-options {
            dhcp-relay {
            {% if ri['dhcp4_mode'] == 'relay' and ri['dhcp4_servers'] != '' %}
                forward-only;
                server-group {{ri['vrf_name']}}-DHCPv4-SERVERS {
                {% for server in ri['dhcp4_servers'] %}
                    {{ server }};
                {% endfor %}
                }
                group {{ ri['vrf_name'] }}-RELAYv4 {
                    active-server-group {{ri['vrf_name']}}-DHCPv4-SERVERS;
                    relay-option-82 {
                        server-id-override;
                    }
                {% for vlan in ns.ri_dev_vlan_list %}
                    {% if vlan['irb_gateway4'] != '' %}
                    interface irb.{{ vlan['vlan_id'] }} {
                        overrides {
                            relay-source {{ ri_loopback }};
                        }
                    }
                    {% endif %}
                {% endfor %}
                }
            {% endif %}
            {% if ri['dhcp6_mode'] == 'relay' and ri['dhcp6_servers'] != '' %}
                dhcpv6 {
                    forward-only;
                    server-group {{ri['vrf_name']}}-DHCPv6-SERVERS {
                {% for server in ri['dhcp6_servers'] %}
                        {{ server }};
                {% endfor %}
                    }
                    group {{ ri['vrf_name'] }}-RELAYv6 {
                        active-server-group {{ri['vrf_name']}}-DHCPv6-SERVERS;
                {% for vlan in ns.ri_dev_vlan_list %}
                    {% if vlan['irb_gateway6'] != '' %}
                        interface irb.{{ vlan['vlan_id'] }} {
                            overrides {
                                relay-source {{ ri_loopback }};
                            }
                        }
                    {% endif %}
                {% endfor %}
                    }

                }
            {% endif %}
            }
        }
        {% endif %}
        routing-options {
            router-id {{ dev_router_id|to_ip }};
            multipath;
            auto-export;
            rib {{ ri['vrf_name'] }}.inet6.0 {
                multipath;
        {% if 'gateway_A' in system_tags or 'gateway_B' in system_tags %}
            {% if ns.is_static_v6 %}
                static {
                {% for vlan in vrf_vlan.vlans %}
                    {% if vlan['vlan_name'] in ns.dev_vlan_list and 
                        vlan['member_of'] == ri['vrf_name'] and
                        vlan['is_static'] and vlan['peer_ipv6'] != '' %}
                    route ::/0 next-hop {{ vlan['peer_ipv6'] }};
                    {% endif %}
                {% endfor %}
                }
            {% endif %}
                aggregate {
            {% for vlan in vrf_vlan.vlans %}
                {% if vlan in ns.ri_vlan_list and 
                      vlan['irb_gateway6'] != '' %}
                    {% set agg_prefix = [ vlan['irb_gateway6'], vlan['ipv6_prefix_len'] ]|join('/')|to_network %}
                    route {{ agg_prefix }}/{{ vlan['ipv6_prefix_len'] }} discard;
                {% endif %}
            {% endfor %}
                }
        {% endif %}
            }
        {% if 'gateway_A' in system_tags or 'gateway_B' in system_tags %}
            {% if ns.is_static_v4 %}
            static {
                {% for vlan in vrf_vlan.vlans %}
                    {% if vlan['vlan_name'] in ns.dev_vlan_list and 
                        vlan['member_of'] == ri['vrf_name'] and
                        vlan['is_static'] and vlan['peer_ipv4'] != '' %}
                route 0.0.0.0/0 next-hop {{ vlan['peer_ipv4'] }};
                    {% endif %}
                {% endfor %}
            }
            {% endif %}
            aggregate {
            {% for vlan in vrf_vlan.vlans %}
                {% if vlan in ns.ri_vlan_list and 
                      vlan['irb_gateway4'] != '' %}
                    {% set agg_prefix = [ vlan['irb_gateway4'], vlan['ipv4_prefix_len'] ]|join('/')|to_network %}
                route {{ agg_prefix }}/{{ vlan['ipv4_prefix_len'] }} discard;
                {% endif %}
            {% endfor %}
            }
        {% endif %}
        }
        protocols {
            evpn {
        {% if prot_prop.evpn.symmetric_irb %}
                irb-symmetric-routing {
                    vni {{ ri['vrf_vni'] }};
                }
        {% endif %}
                ip-prefix-routes {
                    advertise direct-nexthop;
                    encapsulation vxlan;
                    vni {{ ri['vrf_vni'] }};
                    export BGP-AOS-Policy-{{ ri['vrf_name'] }};
                }
            }
        {% if ns.is_bgp and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}
            bgp {
                group l3rtr {
                    type external;
                    multihop {
                        ttl 1;
                    }
                    family inet {
                        unicast {
                            loops 2;
                        }
                    }
                    family inet6 {
                        unicast {
                            loops 2;
                        }
                    }
                    multipath {
                        multiple-as;
                    }
            {% for vlan in vrf_vlan.vlans %}
                {% if vlan['vlan_name'] in ns.dev_vlan_list and 
                      vlan['member_of'] == ri['vrf_name'] and
                      vlan['is_bgp'] and vlan['peer_ipv6'] != '' %}
                    {% set local_addr = vlan['irb_gateway6_a'] if 'gateway_A' in system_tags else vlan['irb_gateway6_b'] %}
                    neighbor {{ vlan['peer_ipv6'] }} {
                        multihop {
                            ttl 30;
                        }
                        local-address {{ local_addr }}
                        hold-time 30;
                        import ( RoutesFromExt-{{ ri['vrf_name'] }}-No_Fabric_Routes );
                        family inet6 {
                            unicast;
                        }
                        export ( RoutesToExt-{{ ri['vrf_name'] }}-Aggregate );
                        peer-as {{ vlan['bgp_peer_asn'] }};
                        bfd-liveness-detection {
                            minimum-interval {{ prot_prop.bgp.bfd_min_int }};
                            multiplier {{ prot_prop.bgp.bfd_multiplier }};
                        }
                    }
                {% endif %}
                {% if vlan['vlan_name'] in ns.dev_vlan_list and 
                      vlan['member_of'] == ri['vrf_name'] and
                      vlan['is_bgp'] and vlan['peer_ipv4'] != '' %}
                    {% set local_addr = vlan['irb_gateway4_a'] if 'gateway_A' in system_tags else vlan['irb_gateway4_b'] %}
                    neighbor {{ vlan['peer_ipv4'] }} {
                        multihop {
                            ttl 30;
                        }
                        local-address {{ local_addr }}
                        hold-time 30;
                        import ( RoutesFromExt-{{ ri['vrf_name'] }}-No_Fabric_Routes );
                        family inet {
                            unicast;
                        }
                        export ( RoutesToExt-{{ ri['vrf_name'] }}-Aggregate );
                        peer-as {{ vlan['bgp_peer_asn'] }};
                        bfd-liveness-detection {
                            minimum-interval {{ prot_prop.bgp.bfd_min_int }};
                            multiplier {{ prot_prop.bgp.bfd_multiplier }};
                        }
                    }
                {% endif %}
            {% endfor %}
                }
            }
        {% endif %}
        {% if ns.is_ospf and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}
            ospf {
                external-preference {{ prot_prop.ospf.ext_pref }};
                export AOS-EXPORT-OSPF;
                import AOS-IMPORT-OSPF;
                area {{ ri['ospf_area'] }} {
                    interface {{ ri_loopback }} {
                        passive;
                    }
            {% for vlan in vrf_vlan.vlans %}
                {% if vlan['vlan_name'] in ns.dev_vlan_list and 
                      vlan['member_of'] == ri['vrf_name'] %}
                    {% if vlan['is_ospf'] %}
                    interface irb.{{ vlan['vlan_id'] }};
                    {% elif vlan['irb_gateway4'] != '' %}
                    interface irb.{{ vlan['vlan_id'] }} {
                        passive;
                    }
                    {% endif %}
                {% endif %}
            {% endfor %}
                }
            }
        {% endif %}
        {% if ns.is_ospf3 and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}
            ospf3 {
                external-preference {{ prot_prop.ospf.ext_pref }};
                export AOS-EXPORT-OSPF;
                import AOS-IMPORT-OSPF;
                area {{ ri['ospf_area'] }} {
                    interface {{ ri_loopback }} {
                        passive;
                    }
            {% for vlan in vrf_vlan.vlans %}
                {% if vlan['vlan_name'] in ns.dev_vlan_list and 
                      vlan['member_of'] == ri['vrf_name'] %}
                    {% if vlan['is_ospf'] %}
                    interface irb.{{ vlan['vlan_id'] }};
                    {% elif  vlan['irb_gateway6'] != '' %}
                    interface irb.{{ vlan['vlan_id'] }} {
                        passive;
                    }
                    {% endif %}
                {% endif %}
            {% endfor %}
                }
            }
        {% endif %}
        }
    }
    {% endfor %}
{% endif %}
{# That closes the leaf portion #}
    {% if 'mgt_prefix_v6' in sys_prop and sys_prop.mgt_prefix_v6 != '' %}
    {% set mgt_prefix_v6 = sys_prop.mgt_prefix_v6|to_network %}
    {{ mgt_vrf }} {
        routing-options {
            rib {{ mgt_vrf }}.inet6.0 {
                static {
                    replace: route ::/0 next-hop {{ mgt_prefix_v6 }}1;
                }
            }
        }
    }
    {% endif %}
}

{# EOF #}