{% set routing_instances = property_sets.get('vrf_vlan', {}).itervalues()|list %}
{% set sys_prop = property_sets.get('custom_sys_properties', {} ) %}
{% set mgt_vrf = sys_prop.mgt_vrf if 'mgt_vrf' in sys_prop else 'mgmt_junos' %}
{# We'll use namespaces to track BGP/OSPF/Static across VLANs in a VRF #}
{% set ns = namespace( ) %}
{% set ns.is_bgp = false %}
{% set ns.is_ospf = false %}
{% set ns.is_ospf3 = false %}
{% set ns.is_static_v4 = false %}
{% set ns.is_static_v6 = false %}
routing-instances {
{# The heavy lifting happens on the leaf devices #}
{% if 'leaf' in system_tags %}
{% set dev_router_id = function.get_resource_value(resources, 'router_id', 'fabric_resources', 'devices') %}
{% set local_asn = function.get_resource_value(resources, 'asn_assignments', 'fabric_resources', 'devices') %}
{% set rd = dev_router_id|to_ip %}
{# Because we already created the namespace above... #}
{% set ns.dev_vlan_list = [] %}
{% set vlan_list = [] %}
{% for ri_item in routing_instances %}
    {% for key, value in ri_item.items() %}
        {% if key == 'vlans' %}
            {% for k, v in value.items() %}
                {{ vlan_list.append(k) or "" }}
            {% endfor %}
        {% endif %}
    {% endfor %}
{% endfor %}
{% for interface_name, iface in interfaces.iteritems() %}
    {% if 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}
        {% for vlan in vlan_list %}
            {% if vlan in iface.link_tags %}
                {{ ns.dev_vlan_list.append(vlan) or "" }}
            {% endif %}
        {% endfor%}
    {% endif %}
{% endfor %}
{% if ns.dev_vlan_list %}
    replace: VSWITCH {
        instance-type mac-vrf;
        protocols {
            evpn {
                vni-options {
    {% for ri in routing_instances %}
        {% for vlan, vlan_items in ri.vlans.iteritems() %}
            {% if vlan in ns.dev_vlan_list %}
                    vni {{ vlan_items.vxlan_vni }} {
                        vrf-target target:{{ vlan_items.vxlan_vni }}L:1;
                    }
            {% endif %}
        {% endfor %}
    {% endfor %}
                }
                encapsulation vxlan;
                default-gateway do-not-advertise;
                extended-vni-list all;
            }
        }
        vtep-source-interface lo0.0 inet6;
        service-type vlan-aware;
    {% for interface_name, iface in interfaces.iteritems() %}
        {% if 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}
        interface {{ interface_name }}.0;
        {% endif %}
    {% endfor %}
        route-distinguisher {{ rd }}:65534;
        vrf-target {
            target:100:100;
        }
        vlans {
{% for ri in routing_instances %}
    {% for vlan, vlan_items in ri.vlans.iteritems() %}
        {% if vlan in ns.dev_vlan_list %}
            {{ vlan }} {
                vlan-id {{ vlan_items.vlan_id }};
                vxlan {
                    vni {{ vlan_items.vxlan_vni }};
                }
            {% if vlan_items.irb_gateway4 != "" or vlan_items.irb_gateway6 != ""%}
                l3-interface irb.{{ vlan_items.vlan_id }};
            {% endif %}
            }
        {% endif %}
    {% endfor %}
{% endfor %}
        }
    }
{% endif %}
{% for ri in routing_instances %}
    {% set ns.is_bgp = false %}
    {% set ns.is_ospf = false %}
    {% set ns.is_ospf3 = false %}
    {% set ns.is_static_v4 = false %}
    {% set ns.is_static_v6 = false %}
    {% for vlan, vlan_items in ri.vlans.iteritems() %}
        {% if vlan_items.is_bgp %}{% set ns.is_bgp = true %}{% endif %}
        {% if vlan_items.is_ospf and vlan_items.irb_gateway4 != '' %}{% set ns.is_ospf = true %}{% endif %}
        {% if vlan_items.is_ospf and vlan_items.irb_gateway6 != '' %}{% set ns.is_ospf3 = true %}{% endif %}
        {% if vlan_items.is_static and vlan_items.peer_ipv4 != '' %}{% set ns.is_static_v4 = true %}{% endif %}
        {% if vlan_items.is_static and vlan_items.peer_ipv6 != '' %}{% set ns.is_static_v6 = true %}{% endif %}
    {% endfor %}
    replace: {{ri.vrf_name }} {
        instance-type vrf;
    {% if ri.lo0_unit %}
        interface lo0.{{ ri.lo0_unit }};
    {% endif %}
    {% for vlan, vlan_items in ri.vlans.iteritems() %}
        {% if vlan in ns.dev_vlan_list %}
            {% if vlan_items.irb_gateway4 != "" or vlan_items.irb_gateway6 != "" %}
        interface irb.{{ vlan_items.vlan_id }};
            {% endif %}
        {% endif %}
    {% endfor %}
        route-distinguisher {{ rd }}:{{ ri.vrf_vni }};
        vrf-target target:{{ ri.vrf_vni }}:1;
        vrf-table-label;
        routing-options {
            router-id {{ dev_router_id|to_ip }};
            multipath;
            auto-export;
            rib {{ ri.vrf_name }}.inet6.0 {
                multipath;
    {% if ns.is_static_v6 and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}
                static {
        {% for vlan, vlan_items in ri.vlans.iteritems() %}
            {% if vlan_items.is_static %}
                    route ::/0 next-hop {{ vlan_items.peer_ipv6 }};
            {% endif %}
        {% endfor %}
                }
    {% endif %}
            }
        {% if ns.is_static_v4 and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}
            static {
            {% for vlan, vlan_items in ri.vlans.iteritems() %}
                {% if vlan_items.is_static %}
                route 0.0.0.0/0 next-hop {{ vlan_items.peer_ipv4 }};
                {% endif %}
            {% endfor %}
            }
        {% endif %}
        }
        protocols {
            evpn {
                ip-prefix-routes {
                    advertise direct-nexthop;
                    encapsulation vxlan;
                    vni {{ ri.vrf_vni }};
                    export BGP-AOS-Policy-{{ ri.vrf_name }};
                }
            }
        {% if ns.is_bgp and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}
            bgp {
                group l3rtr {
                    type external;
                    multihop {
                        ttl 1;
                    }
                    family inet {
                        unicast {
                            loops 2;
                        }
                    }
                    family inet6 {
                        unicast {
                            loops 2;
                        }
                    }
                    multipath {
                        multiple-as;
                    }
            {% for vlan, vlan_items in ri.vlans.iteritems() %}
                {% if vlan_items.is_bgp and vlan_items.peer_ipv6 != '' %}
                    {% set local_addr = vlan_items.irb_gateway6_a if 'gateway_A' in system_tags else vlan_items.irb_gateway6_b %}
                    neighbor {{ vlan_items.peer_ipv6 }} {
                        multihop {
                            ttl 30;
                        }
                        local-address {{ local_addr }}
                        hold-time 30;
                        import ( RoutesFromExt-{{ ri.vrf_name }}-Default_immutable );
                        family inet6 {
                            unicast;
                        }
                        export ( RoutesToExt-{{ ri.vrf_name }}-Default_immutable );
                        peer-as {{ vlan_items.bgp_peer_asn }};
                        bfd-liveness-detection {
                            minimum-interval 1000;
                            multiplier 3;
                        }
                    }
                {% endif %}
                {% if vlan_items.is_bgp and vlan_items.peer_ipv4 != '' %}
                    {% set local_addr = vlan_items.irb_gateway4_a if 'gateway_A' in system_tags else vlan_items.irb_gateway4_b %}
                    neighbor {{ vlan_items.peer_ipv4 }} {
                        multihop {
                            ttl 30;
                        }
                        local-address {{ local_addr }}
                        hold-time 30;
                        import ( RoutesFromExt-{{ ri.vrf_name }}-Default_immutable );
                        family inet {
                            unicast;
                        }
                        export ( RoutesToExt-{{ ri.vrf_name }}-Default_immutable );
                        peer-as {{ vlan_items.bgp_peer_asn }};
                        bfd-liveness-detection {
                            minimum-interval 1000;
                            multiplier 3;
                        }
                    }
                {% endif %}
            {% endfor %}
                }
            }
        {% endif %}
        {% if ns.is_ospf and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}
            ospf {
                area {{ ri.ospf_area }} {
                    interface lo0.{{ ri.lo0_unit }} {
                        passive;
                    }
            {% for vlan, vlan_items in ri.vlans.iteritems() %}
                {% if vlan_items.is_ospf %}
                    interface irb.{{ vlan_items.vlan_id }};
                {% elif vlan_items.irb_gateway4 != '' %}
                    interface irb.{{ vlan_items.vlan_id }} {
                        passive;
                    }
                {% endif %}
            {% endfor %}
                }
            }
        {% endif %}
        {% if ns.is_ospf3 and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}
            ospf3 {
                area {{ ri.ospf_area }} {
                    interface lo0.{{ ri.lo0_unit }} {
                        passive;
                    }
            {% for vlan, vlan_items in ri.vlans.iteritems() %}
                {% if vlan_items.is_ospf %}
                    interface irb.{{ vlan_items.vlan_id }};
                {% elif  vlan_items.irb_gateway6 != '' %}
                    interface irb.{{ vlan_items.vlan_id }} {
                        passive;
                    }
                {% endif %}
            {% endfor %}
                }
            }
        {% endif %}
        }
    }
{% endfor %}
{% endif %}
{# That closes the leaf portion #}
    {% if 'mgt_prefix_v6' in sys_prop and sys_prop.mgt_prefix_v6 != '' %}
    {% set mgt_prefix_v6 = sys_prop.mgt_prefix_v6|to_network %}
    {{ mgt_vrf }} {
        routing-options {
            rib {{ mgt_vrf }}.inet6.0 {
                static {
                    replace: route ::/0 next-hop {{ mgt_prefix_v6 }}1;
                }
            }
        }
    }
    {% endif %}
}
{# EOF #}