{% set this_router = hostname %}
{% set intf_prop = property_sets.get('interface_properties', {} ) %}
{% set sys_prop = property_sets.get('custom_sys_properties', {} ) %}
{% set loopback_prefix = function.get_resource_value(resources, 'loopback_assignments', 'fabric_resources', 'devices') %}
{% if loopback_prefix != '' %}
    {% if loopback_prefix|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff' 
       or loopback_prefix|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe' %}
        {% set loopback_ipv6 = loopback_prefix %}
    {% else %}
        {% set loopback_ipv6 = loopback_prefix|replace( '::/', '::1/') %}
    {% endif %}
{% endif %}
{% set esi_lags = namespace(esi_intfs={}, lacp_system_ids={}) %}
{% set vrf_vlan = property_sets.get('vrf_vlan', {} ) %}
{% for interface_name, intf_resources in interface_resources.iteritems() %}
    {% for resource in intf_resources if resource['label'] == 'lacp' %}
        {% for r in resource['resources'] %}
            {% if r.get('value') and r.get('label') == 'lacp_system_ids' %}
                {% set esi_prefix = '00:01:00:00:' %}
                {% set mac_address = '{:012X}'.format(r['value']|int) %}
                {% set esi_address = esi_prefix + mac_address|to_mac_format('hyphen')|replace('-', ':') %}
                {% do esi_lags.esi_intfs.update({interface_name: esi_address}) %}
            {% endif %}
            {% if r.get('value') and r.get('label') == 'lacp_system_ids' %}
                {% set mac_address = '{:012X}'.format(r['value']|int + 10000) %}
                {% set mac_address = mac_address|to_mac_format('hyphen')|replace('-', ':') %}
                {% do esi_lags.lacp_system_ids.update({interface_name: mac_address}) %}
            {% endif %}
        {%- endfor %}
    {%- endfor %}
{%- endfor %}
{% set ns = namespace( ) %}
{% set ns.dev_vlan_list = [ ] %}
{% set ns.global_vlan_list = [ ] %}
{% for vlan in vrf_vlan.vlans %}
        {{ ns.global_vlan_list.append(vlan['vlan_name']) or "" }}
{%- endfor %}

interfaces {
{% for interface_name, iface in interfaces.iteritems() %}
    replace: {{ interface_name }} {
        description "{{ iface['description'] }}";
    {# Is this a LAG member? #}
    {% if iface.part_of %}
        ether-options {
            802.3ad {{ iface.part_of }};
        }
    }
        {% continue %}
    {% endif %}
    {# Is this a LAG bundle (e.g., aeX interface)? #}
    {% if iface.get('composed_of') %}
        {% set esi_id = esi_lags.esi_intfs.get(interface_name) %}
        {% set lacp_system_id = esi_lags.lacp_system_ids.get(interface_name) %}
        {% if esi_id %}
        esi {
            {{esi_id}};
            all-active;
        }
        {% endif %}
        {% set lacp_mode = {'lacp_active': 'active', 'lacp_passive': 'passive'}.get(iface['lag_mode']) %}
        {% if lacp_system_id %}
        aggregated-ether-options {
            lacp {
                {{lacp_mode}};
                system-id {{lacp_system_id}};
            }
        }
        {% endif %}
    {% endif %}
    {# Is this a fabric link? #}
    {% if iface['ipv6_address'] and iface['ipv6_prefixlen'] %}
        mtu {{ intf_prop.fabric_intf_mtu }};
        unit 0 {
            family inet6 {
                address {{ iface['ipv6_address'] }}/{{ iface['ipv6_prefixlen'] }};
            }
        }
    {# Is this a host-facing interface? #}
    {% elif 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}
        {% set intf_mode = 'trunk' if 'mode_trunk' in iface.link_tags else 'access' %}
        {% set intf_vlan_list = [] %}
        {% for vlan in ns.global_vlan_list %}
            {% if vlan in iface.link_tags %}
                {{ ns.dev_vlan_list.append(vlan) or "" }}{{ intf_vlan_list.append(vlan) or "" }}
            {%- endif %}
        {% endfor%}
        mtu {{ intf_prop.host_intf_mtu }};
        unit 0 {
            family ethernet-switching {
            {% if intf_vlan_list %}
                interface-mode {{intf_mode}};
                vlan {
                    members [ {% for vlan in intf_vlan_list %}{{ vlan }} {% endfor %}];
                }
            {% endif %}
            }
        }
    {% else %}
        unit 0;
    {% endif %}
    }
{% endfor %}
{# Now for the loopback interface #}
{% if loopback_ipv6 %}
    replace: lo0 {
        unit 0 {
            family inet {
    {% if 'protect_re' in sys_prop and sys_prop.protect_re.enabled %}
                filter {
                    input Protect-RE_v4;
                }
    {% endif %}
            }
            family inet6 {
    {% if 'protect_re' in sys_prop and sys_prop.protect_re.enabled %}
                filter {
                    input Protect-RE_v6;
                }
    {% endif %}
                address {{ loopback_ipv6 }};
            }
        }
    {% if 'leaf' in system_tags %}
        {% for ri in vrf_vlan.vrfs %}
            {% if ri['lo0_unit'] %}
                        {% set host_part = [ '::', ri['lo0_unit'], ':1/']|join %}
                        {% set vrf_lo0_ipv6 = loopback_prefix|replace( '::/', host_part ) %}

        unit {{ ri['lo0_unit'] }} {
            family inet6 {
                address {{ vrf_lo0_ipv6 }};
            }
        }
            {%- endif %}
        {%- endfor %}  
    {%- endif %}  
    }
{% endif %}
{# And now for the IRB interfaces #}
{% if 'leaf' in system_tags %}
    {% for vlan in vrf_vlan.vlans %}
        {% if loop.first %}
    replace: irb {
        {% endif %}
        {% if vlan['vlan_name'] in ns.dev_vlan_list %}
            {% if vlan['irb_gateway4'] or vlan['irb_gateway6'] %}
        unit {{ vlan['vlan_id'] }} {
                {# If the below test is true, we're using anycast addresses #}
                {% if not ( vlan['irb_gateway4_a'] or
                            vlan['irb_gateway4_b'] or
                            vlan['irb_gateway6_a'] or
                            vlan['irb_gateway6_b'] ) %}
            mac 00:1c:73:00:00:01;
                    {% if vlan['irb_gateway4'] %}
            family inet {
                mtu {{ intf_prop.irb_intf_mtu }};
                address {{ vlan['irb_gateway4'] }}/{{ vlan['ipv4_prefix_len'] }};
            }
                    {% endif %}
                    {% if vlan['irb_gateway6'] %}
            family inet6 {
                mtu {{ intf_prop.irb_intf_mtu }};
                address {{ vlan['irb_gateway6'] }}/{{ vlan['ipv6_prefix_len'] }};
            }
                    {% endif %}
                {# Otherwise we're using VGA #}
                {% else %}
            virtual-gateway-accept-data;
                    {% if vlan['irb_gateway4'] %}
            virtual-gateway-v4-mac 00:1c:73:00:00:01;
            family inet {
                mtu {{ intf_prop.irb_intf_mtu }};
                {% set  gateway4 = vlan['irb_gateway4_a'] if 'gateway_A' in system_tags else vlan['irb_gateway4_b'] %}
                address {{ gateway4 }}/{{ vlan['ipv4_prefix_len'] }} {
                    virtual-gateway-address {{ vlan['irb_gateway4'] }}
                }
            }
                    {% endif %}
                    {% if vlan['irb_gateway6'] %}
            virtual-gateway-v6-mac 00:1c:73:00:00:01;
            family inet6 {
                mtu {{ intf_prop.irb_intf_mtu }};
                {% set  gateway6 = vlan['irb_gateway6_a'] if 'gateway_A' in system_tags else vlan['irb_gateway6_b'] %}
                address {{ gateway6 }}/{{ vlan['ipv6_prefix_len'] }} {
                    virtual-gateway-address {{ vlan['irb_gateway6'] }}
                }
            }
                    {% endif %}
                {% endif %}
        }
            {% endif %}
        {% endif %}
        {% if loop.last %}
    }
        {% endif %}
    {% endfor %}
{% endif %}
{# Adding IPv6 for em0 here.#}
{% if 'mgt_prefix_v6' in sys_prop and sys_prop.mgt_prefix_v6 != '' %}
    {% set mgt_prefix_v6 = sys_prop.mgt_prefix_v6|to_network %}
    {% set mgt_v6_prefixlen = sys_prop.mgt_prefix_v6|to_prefixlen %}
    em0 {
        unit 0 {
            family inet6 {
                replace: address {{ mgt_prefix_v6 }}{{ management_ip }}/{{ mgt_v6_prefixlen }};
            }
        }
    }
{% endif %}
}
{# EOF #}