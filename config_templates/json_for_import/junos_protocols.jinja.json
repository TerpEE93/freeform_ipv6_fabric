{
  "label": "junos_protocols.jinja",
  "text": "{% set routing_instances = property_sets.get('vrf_vlan', {}).itervalues()|list %}\n{% set prot_prop = property_sets.get('protocol_properties', {} ) %}\n{% set sys_prop = property_sets.get('custom_sys_properties', {} ) %}\n{% set ns = namespace ( ) %}\n{% set ns.neighbor_asn = None %}\n{% set ns.neighbor_loopback = None %}\n{% set ns.dev_vlan_list = [] %}\n{% set ns.nameserver_list = [] %}\n{% for server in sys_prop.dns.servers %}\n    {{ns.nameserver_list.append( server ) or '' }}\n{% endfor %}\n{% set vlan_list = [] %}\n{# Compute a Junos-friendly loopback address from what resource generator created #}\n{% set loopback_prefix = function.get_resource_value(resources, 'loopback_assignments', 'fabric_resources', 'devices') %}\n{% if loopback_prefix != '' %}\n    {% if loopback_prefix|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff' \n       or loopback_prefix|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe' %}\n        {% set loopback_ipv6 = loopback_prefix|to_ip %}\n    {% else %}\n        {% set loopback_ipv6 = loopback_prefix|replace( '::/', '::1/')|to_ip %}\n    {% endif %}\n{% endif %}\n{% set local_asn = function.get_resource_value(resources, 'asn_assignments', 'fabric_resources', 'devices') %}\n{% for ri_item in routing_instances %}\n    {% for key, value in ri_item.items() %}\n        {% if key == 'vlans' %}\n            {% for k, v in value.items() %}\n                {{ vlan_list.append(k) or \"\" }}\n            {% endfor %}\n        {% endif %}\n    {% endfor %}\n{% endfor %}\n{% for interface_name, iface in interfaces.iteritems() %}\n    {% if 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}\n        {% for vlan in vlan_list %}\n            {% if vlan in iface.link_tags %}\n                {{ ns.dev_vlan_list.append(vlan) or '' }}\n            {% endif %}\n        {% endfor%}\n    {% endif %}\n{% endfor %}\n\nreplace: protocols {\n    router-advertisement {\n{% for interface_name, iface in interfaces.iteritems() %}\n    {% if iface['ipv6_address'] and iface['ipv6_prefixlen'] %}\n        interface {{ interface_name }}.0 {\n            max-advertisement-interval {{ prot_prop.router_advertisement.max_adv_int }};\n            min-advertisement-interval {{ prot_prop.router_advertisement.min_adv_int }};\n        }\n    {% endif %}\n{% endfor %}\n{% if ns.dev_vlan_list %}\n    {% for ri in routing_instances %}\n        {% for vlan, vlan_items in ri.vlans.iteritems() %}\n            {% if vlan in ns.dev_vlan_list %}\n                {% if vlan_items.irb_gateway6 %}\n                    {% set irb_prefix = [ vlan_items.irb_gateway6, vlan_items.ipv6_prefix_len ]|join('/')|to_network %}\n        interface irb.{{ vlan_items.vlan_id }} {\n            max-advertisement-interval {{ prot_prop.router_advertisement.max_adv_int }};\n            min-advertisement-interval {{ prot_prop.router_advertisement.min_adv_int }};\n                    {% for server in ns.nameserver_list %}\n            dns-server-address {{ server }} {\n                lifetime {{ prot_prop.router_advertisement.rdnss_lifetime }};\n            }\n                    {% endfor %}\n            prefix {{ irb_prefix }}/{{ vlan_items.ipv6_prefix_len }} {\n                preferred-lifetime {{ prot_prop.router_advertisement.prefix_pref_lifetime }};\n                valid-lifetime {{ prot_prop.router_advertisement.prefix_val_lifetime }};\n            }\n        }\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n    {% endfor %}\n{% endif %}\n    }\n    lldp {\n        port-id-subtype interface-name;\n        port-description-type interface-description;\n        neighbour-port-info-display port-id;\n        interface all;\n    }\n    rstp {\n        bridge-priority 0;\n        bpdu-block-on-edge;\n{% for interface_name, iface in interfaces.iteritems() %}\n    {% if 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}\n        interface {{ interface_name }} {\n            edge;\n        }\n    {% endif %}\n{% endfor %}\n    }\n    bgp {\n        log-updown;\n        graceful-restart;\n{% if 'leaf' in system_tags %}\n        group l3clos-l {\n            type external;\n            family inet6 {\n                unicast;\n            }\n            export ( LEAF_TO_SPINE_FABRIC_OUT && BGP-AOS-Policy );\n            multipath {\n                multiple-as;\n            }\n            bfd-liveness-detection {\n                minimum-interval {{ prot_prop.bgp.bfd_min_int }};\n                multiplier {{ prot_prop.bgp.bfd_multiplier }};\n            }\n            vpn-apply-export;\n{% for interface_name, iface in interfaces.iteritems() %}\n    {% if not iface.get('ipv6_address') %}\n        {% continue %}\n    {% endif %}\n    {% set neighbor_interfaces = iface.get('neighbor_interfaces', []) %}\n    {% for neighbor_interface in neighbor_interfaces if neighbor_interface.get('ipv6_address') %}\n\t\t{% set ns.neighbor_asn = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'asn_assignments', 'fabric_resources', 'devices') %}\n            neighbor {{ neighbor_interface.ipv6_address }} {\n                peer-as {{ ns.neighbor_asn }};\n            }\n    {% endfor %}\n{% endfor %}\n        }\n        group l3clos-l-evpn {\n            type external;\n            multipath {\n                multiple-as;\n            }\n            multihop {\n                no-nexthop-change;\n                ttl 1;\n            }\n            family evpn {\n                signaling {\n                    loops 2;\n                }\n            }\n            bfd-liveness-detection {\n                minimum-interval {{ prot_prop.bgp.bfd_min_int }};\n                multiplier {{ prot_prop.bgp.bfd_multiplier }};\n            }\n            vpn-apply-export;\n            local-address {{ loopback_ipv6 }};\n            export ( LEAF_TO_SPINE_EVPN_OUT && EVPN_EXPORT )\n{% for interface_name, iface in interfaces.iteritems() %}\n    {% if not iface.get('ipv6_address') %}\n        {% continue %}\n    {% endif %}\n    {% set neighbor_interfaces = iface.get('neighbor_interfaces', []) %}\n    {% for neighbor_interface in neighbor_interfaces if neighbor_interface.get('ipv6_address') %}\n\t\t{% set ns.neighbor_asn = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'asn_assignments', 'fabric_resources', 'devices') %}\n\t\t{% set ns.neighbor_loopback = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'loopback_assignments', 'fabric_resources', 'devices') %}\n            {% if ns.neighbor_loopback|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'\n               or ns.neighbor_loopback|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe' %}\n               {% set peer_ipv6 = ns.neighbor_loopback|to_ip %}\n            {% else %}\n                {% set peer_ipv6 = ns.neighbor_loopback|replace( '::/', '::1/' )|to_ip %}\n            {% endif %}\n            neighbor {{ peer_ipv6 }} {\n                peer-as {{ ns.neighbor_asn }};\n            }\n    {% endfor %}\n{% endfor %}\n        }\n{% endif %}\n{% if 'spine' in system_tags %}\n        group l3clos-s {\n            type external;\n            family inet6 {\n                unicast;\n            }\n            export ( SPINE_TO_LEAF_FABRIC_OUT && BGP-AOS-Policy );\n            multipath {\n                multiple-as;\n            }\n            bfd-liveness-detection {\n                minimum-interval {{ prot_prop.bgp.bfd_min_int }};\n                multiplier {{ prot_prop.bgp.bfd_multiplier }};\n            }\n            vpn-apply-export;\n{% for interface_name, iface in interfaces.iteritems() %}\n    {% if not iface.get('ipv6_address') %}\n        {% continue %}\n    {% endif %}\n    {% set neighbor_interfaces = iface.get('neighbor_interfaces', []) %}\n    {% for neighbor_interface in neighbor_interfaces if neighbor_interface.get('ipv6_address') %}\n\t\t{% set ns.neighbor_asn = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'asn_assignments', 'fabric_resources', 'devices') %}\n            neighbor {{ neighbor_interface.ipv6_address }} {\n                peer-as {{ ns.neighbor_asn }};\n            }\n    {% endfor %}\n{% endfor %}\n        }\n        group l3clos-s-evpn {\n            type external;\n            multipath {\n                multiple-as;\n            }\n            multihop {\n                no-nexthop-change;\n                ttl 1;\n            }\n            family evpn {\n                signaling;\n            }\n            bfd-liveness-detection {\n                minimum-interval {{ prot_prop.bgp.bfd_min_int }};\n                multiplier {{ prot_prop.bgp.bfd_multiplier }};\n            }\n            vpn-apply-export;\n            local-address {{ loopback_ipv6 }};\n            export ( LEAF_TO_SPINE_EVPN_OUT )\n{% for interface_name, iface in interfaces.iteritems() %}\n    {% if not iface.get('ipv6_address') %}\n        {% continue %}\n    {% endif %}\n    {% set neighbor_interfaces = iface.get('neighbor_interfaces', []) %}\n    {% for neighbor_interface in neighbor_interfaces if neighbor_interface.get('ipv6_address') %}\n\t\t{% set ns.neighbor_asn = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'asn_assignments', 'fabric_resources', 'devices') %}\n\t\t{% set ns.neighbor_loopback = function.get_resource_value(all_resources.get(neighbor_interface.system_id), 'loopback_assignments', 'fabric_resources', 'devices') %}\n            {% if ns.neighbor_loopback|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'\n               or ns.neighbor_loopback|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe' %}\n               {% set peer_ipv6 = ns.neighbor_loopback|to_ip %}\n            {% else %}\n                {% set peer_ipv6 = ns.neighbor_loopback|replace( '::/', '::1/' )|to_ip %}\n            {% endif %}\n            neighbor {{ peer_ipv6 }} {\n                peer-as {{ ns.neighbor_asn }};\n            }\n    {% endfor %}\n{% endfor %}\n        }\n{% endif %}\n    }\n}\n{# EOF #}"
}