{
  "label": "junos_routing_instances.jinja",
  "text": "{% set vrf_vlan = property_sets.get('vrf_vlan', {} ) %}\n{% set sys_prop = property_sets.get('custom_sys_properties', {} ) %}\n{% set prot_prop = property_sets.get('protocol_properties', {} ) %}\n{% set mgt_vrf = sys_prop.mgt_vrf if 'mgt_vrf' in sys_prop else 'mgmt_junos' %}\n{# We'll use namespaces to track BGP/OSPF/Static across VLANs in a VRF #}\n{% set ns = namespace( ) %}\n{% set ns.is_bgp = false %}\n{% set ns.is_ospf = false %}\n{% set ns.is_ospf3 = false %}\n{% set ns.is_static_v4 = false %}\n{% set ns.is_static_v6 = false %}\nrouting-instances {\n{# The heavy lifting happens on the leaf devices #}\n{% if 'leaf' in system_tags %}\n    {% set dev_router_id = function.get_resource_value(resources, 'router_id', 'fabric_resources', 'devices') %}\n    {% set local_asn = function.get_resource_value(resources, 'asn_assignments', 'fabric_resources', 'devices') %}\n    {% set rd = dev_router_id|to_ip %}\n    {# Because we already created the namespace above... #}\n    {% set ns.dev_vlan_list = [] %}\n    {% set vlan_list = [] %}\n\n    {% for interface_name, iface in interfaces.iteritems() %}\n        {% if 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}\n            {% for vlan in vrf_vlan.vlans %}\n                {% if vlan['vlan_name'] in iface.link_tags %}\n                    {{ ns.dev_vlan_list.append(vlan['vlan_name']) or \"\" }}\n                {%- endif %}\n            {% endfor%}\n        {% endif %}\n    {% endfor %}\n\n    {% if ns.dev_vlan_list %}\n    replace: VSWITCH {\n        instance-type mac-vrf;\n        protocols {\n            evpn {\n                vni-options {\n        {% for vlan in vrf_vlan.vlans %}\n            {% if vlan['vlan_name'] in ns.dev_vlan_list %}\n                    vni {{ vlan['vxlan_vni'] }} {\n                        vrf-target target:{{ vlan['vxlan_vni'] }}L:1;\n                    }\n            {% endif %}\n        {% endfor %}\n                }\n                encapsulation vxlan;\n                default-gateway no-gateway-community;\n                extended-vni-list all;\n            }\n        }\n        vtep-source-interface lo0.0 inet6;\n        service-type vlan-aware;\n        {% for interface_name, iface in interfaces.iteritems() %}\n            {% if 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}\n        interface {{ interface_name }}.0;\n            {% endif %}\n        {% endfor %}\n        route-distinguisher {{ rd }}:65534;\n        vrf-target {\n            target:100:100;\n        }\n        vlans {\n        {% for vlan in vrf_vlan.vlans %}\n            {% if vlan['vlan_name'] in ns.dev_vlan_list %}\n            {{ vlan['vlan_name'] }} {\n                vlan-id {{ vlan['vlan_id'] }};\n                vxlan {\n                    vni {{ vlan['vxlan_vni'] }};\n                }\n                {% if vlan['irb_gateway4'] != \"\" or vlan['irb_gateway6'] != \"\" %}\n                l3-interface irb.{{ vlan['vlan_id'] }};\n                {% endif %}\n            }\n            {% endif %}\n        {% endfor %}\n        }\n    }\n    {% endif %}\n\n    {% for ri in vrf_vlan.vrfs %}\n        {% set ri_loopback = [ 'lo0.', ri['lo0_unit'] ]|join %}\n        {% set ns.is_bgp = false %}\n        {% set ns.is_ospf = false %}\n        {% set ns.is_ospf3 = false %}\n        {% set ns.is_static_v4 = false %}\n        {% set ns.is_static_v6 = false %}\n        {% set ns.ri_vlan_list = [ ] %}\n        {% set ns.ri_dev_vlan_list = [ ] %}\n        {% for vlan in vrf_vlan.vlans %}\n            {% if vlan['member_of'] == ri['vrf_name'] %}\n                {{ ns.ri_vlan_list.append( vlan ) or '' }}\n                {% if vlan['vlan_name'] in ns.dev_vlan_list %}\n                    {{ ns.ri_dev_vlan_list.append( vlan ) or '' }}\n                    {% if vlan['is_bgp'] %}{% set ns.is_bgp = true %}{% endif %}\n                    {% if vlan['is_ospf'] and vlan['irb_gateway4'] != '' %}{% set ns.is_ospf = true %}{% endif %}\n                    {% if vlan['is_ospf'] and vlan['irb_gateway6'] != '' %}{% set ns.is_ospf3 = true %}{% endif %}\n                    {% if vlan['is_static'] and vlan['peer_ipv4'] != '' %}{% set ns.is_static_v4 = true %}{% endif %}\n                    {% if vlan['is_static'] and vlan['peer_ipv6'] != '' %}{% set ns.is_static_v6 = true %}{% endif %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n\n    replace: {{ri['vrf_name'] }} {\n        instance-type vrf;\n        {% if ri['lo0_unit'] %}\n        interface {{ ri_loopback }};\n        {% endif %}\n        {% for vlan in vrf_vlan.vlans %}\n            {% if vlan['vlan_name'] in ns.dev_vlan_list and \n                  vlan['member_of'] == ri['vrf_name'] %}\n                {% if vlan['irb_gateway4'] != \"\" or vlan['irb_gateway6'] != \"\" %}\n        interface irb.{{ vlan['vlan_id'] }};\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n        route-distinguisher {{ rd }}:{{ ri['vrf_vni'] }};\n        vrf-target target:{{ ri['vrf_vni'] }}:1;\n        vrf-table-label;\n        {% if ri['dhcp4_mode'] == 'relay' or ri['dhcp6_mode'] == 'relay' %}\n        forwarding-options {\n            dhcp-relay {\n            {% if ri['dhcp4_mode'] == 'relay' and ri['dhcp4_servers'] != '' %}\n                forward-only;\n                server-group {{ri['vrf_name']}}-DHCPv4-SERVERS {\n                {% for server in ri['dhcp4_servers'] %}\n                    {{ server }};\n                {% endfor %}\n                }\n                group {{ ri['vrf_name'] }}-RELAYv4 {\n                    active-server-group {{ri['vrf_name']}}-DHCPv4-SERVERS;\n                    relay-option-82 {\n                        server-id-override;\n                    }\n                {% for vlan in ns.ri_dev_vlan_list %}\n                    {% if vlan['irb_gateway4'] != '' %}\n                    interface irb.{{ vlan['vlan_id'] }} {\n                        overrides {\n                            relay-source {{ ri_loopback }};\n                        }\n                    }\n                    {% endif %}\n                {% endfor %}\n                }\n            {% endif %}\n            {% if ri['dhcp6_mode'] == 'relay' and ri['dhcp6_servers'] != '' %}\n                dhcpv6 {\n                    forward-only;\n                    server-group {{ri['vrf_name']}}-DHCPv6-SERVERS {\n                {% for server in ri['dhcp6_servers'] %}\n                        {{ server }};\n                {% endfor %}\n                    }\n                    group {{ ri['vrf_name'] }}-RELAYv6 {\n                        active-server-group {{ri['vrf_name']}}-DHCPv6-SERVERS;\n                {% for vlan in ri_dev_vlan_list %}\n                    {% if vlan['irb_gateway6'] != '' %}\n                        interface irb.{{ vlan['vlan_id'] }} {\n                            overrides {\n                                relay-source {{ ri_loopback }};\n                            }\n                        }\n                    {% endif %}\n                {% endfor %}\n                    }\n\n                }\n            {% endif %}\n            }\n        }\n        {% endif %}\n        routing-options {\n            router-id {{ dev_router_id|to_ip }};\n            multipath;\n            auto-export;\n            rib {{ ri['vrf_name'] }}.inet6.0 {\n                multipath;\n        {% if ns.is_static_v6 and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}\n                static {\n            {% for vlan in vrf_vlan.vlans %}\n                {% if vlan['vlan_name'] in ns.dev_vlan_list and \n                      vlan['member_of'] == ri['vrf_name'] and\n                      vlan['is_static'] and vlan['peer_ipv6'] != '' %}\n                    route ::/0 next-hop {{ vlan['peer_ipv6'] }};\n                {% endif %}\n            {% endfor %}\n                }\n                aggregate {\n            {% for vlan in vrf_vlan.vlans %}\n                {% if vlan in ns.ri_vlan_list and \n                      vlan['irb_gateway6'] != '' %}\n                    {% set agg_prefix = [ vlan['irb_gateway6'], vlan['ipv6_prefix_len'] ]|join('/')|to_network %}\n                    route {{ agg_prefix }}/{{ vlan['ipv6_prefix_len'] }} discard;\n                {% endif %}\n            {% endfor %}\n            }\n        {% endif %}\n            }\n        {% if ns.is_static_v4 and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}\n            static {\n            {% for vlan in vrf_vlan.vlans %}\n                {% if vlan['vlan_name'] in ns.dev_vlan_list and \n                      vlan['member_of'] == ri['vrf_name'] and\n                      vlan['is_static'] and vlan['peer_ipv4'] != '' %}\n                route 0.0.0.0/0 next-hop {{ vlan['peer_ipv4'] }};\n                {% endif %}\n            {% endfor %}\n            }\n            aggregate {\n            {% for vlan in vrf_vlan.vlans %}\n                {% if vlan in ns.ri_vlan_list and \n                      vlan['irb_gateway4'] != '' %}\n                    {% set agg_prefix = [ vlan['irb_gateway4'], vlan['ipv4_prefix_len'] ]|join('/')|to_network %}\n                route {{ agg_prefix }}/{{ vlan['ipv4_prefix_len'] }} discard;\n                {% endif %}\n            {% endfor %}\n            }\n        {% endif %}\n        }\n        protocols {\n            evpn {\n        {% if prot_prop.evpn.symmetric_irb %}\n                irb-symmetric-routing {\n                    vni {{ ri['vrf_vni'] }};\n                }\n        {% endif %}\n                ip-prefix-routes {\n                    advertise direct-nexthop;\n                    encapsulation vxlan;\n                    vni {{ ri['vrf_vni'] }};\n                    export BGP-AOS-Policy-{{ ri['vrf_name'] }};\n                }\n            }\n        {% if ns.is_bgp and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}\n            bgp {\n                group l3rtr {\n                    type external;\n                    multihop {\n                        ttl 1;\n                    }\n                    family inet {\n                        unicast {\n                            loops 2;\n                        }\n                    }\n                    family inet6 {\n                        unicast {\n                            loops 2;\n                        }\n                    }\n                    multipath {\n                        multiple-as;\n                    }\n            {% for vlan in vrf_vlan.vlans %}\n                {% if vlan['vlan_name'] in ns.dev_vlan_list and \n                      vlan['member_of'] == ri['vrf_name'] and\n                      vlan['is_bgp'] and vlan['peer_ipv6'] != '' %}\n                    {% set local_addr = vlan['irb_gateway6_a'] if 'gateway_A' in system_tags else vlan['irb_gateway6_b'] %}\n                    neighbor {{ vlan['peer_ipv6'] }} {\n                        multihop {\n                            ttl 30;\n                        }\n                        local-address {{ local_addr }}\n                        hold-time 30;\n                        import ( RoutesFromExt-{{ ri['vrf_name'] }}-Default_immutable );\n                        family inet6 {\n                            unicast;\n                        }\n                        export ( RoutesToExt-{{ ri['vrf_name'] }}-Default_immutable );\n                        peer-as {{ vlan['bgp_peer_asn'] }};\n                        bfd-liveness-detection {\n                            minimum-interval {{ prot_prop.bgp.bfd_min_int }};\n                            multiplier {{ prot_prop.bgp.bfd_multiplier }};\n                        }\n                    }\n                {% endif %}\n                {% if vlan['vlan_name'] in ns.dev_vlan_list and \n                      vlan['member_of'] == ri['vrf_name'] and\n                      vlan['is_bgp'] and vlan['peer_ipv4'] != '' %}\n                    {% set local_addr = vlan['irb_gateway4_a'] if 'gateway_A' in system_tags else vlan['irb_gateway4_b'] %}\n                    neighbor {{ vlan['peer_ipv4'] }} {\n                        multihop {\n                            ttl 30;\n                        }\n                        local-address {{ local_addr }}\n                        hold-time 30;\n                        import ( RoutesFromExt-{{ ri['vrf_name'] }}-Default_immutable );\n                        family inet {\n                            unicast;\n                        }\n                        export ( RoutesToExt-{{ ri['vrf_name'] }}-Default_immutable );\n                        peer-as {{ vlan['bgp_peer_asn'] }};\n                        bfd-liveness-detection {\n                            minimum-interval {{ prot_prop.bgp.bfd_min_int }};\n                            multiplier {{ prot_prop.bgp.bfd_multiplier }};\n                        }\n                    }\n                {% endif %}\n            {% endfor %}\n                }\n            }\n        {% endif %}\n        {% if ns.is_ospf and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}\n            ospf {\n                external-preference {{ prot_prop.ospf.ext_pref }};\n                export AOS-EXPORT-OSPF;\n                import AOS-IMPORT-OSPF;\n                area {{ ri['ospf_area'] }} {\n                    interface {{ ri_loopback }} {\n                        passive;\n                    }\n            {% for vlan in vrf_vlan.vlans %}\n                {% if vlan['vlan_name'] in ns.dev_vlan_list and \n                      vlan['member_of'] == ri['vrf_name'] %}\n                    {% if vlan['is_ospf'] %}\n                    interface irb.{{ vlan['vlan_id'] }};\n                    {% elif vlan['irb_gateway4'] != '' %}\n                    interface irb.{{ vlan['vlan_id'] }} {\n                        passive;\n                    }\n                    {% endif %}\n                {% endif %}\n            {% endfor %}\n                }\n            }\n        {% endif %}\n        {% if ns.is_ospf3 and ( 'gateway_A' in system_tags or 'gateway_B' in system_tags ) %}\n            ospf3 {\n                external-preference {{ prot_prop.ospf.ext_pref }};\n                export AOS-EXPORT-OSPF;\n                import AOS-IMPORT-OSPF;\n                area {{ ri['ospf_area'] }} {\n                    interface {{ ri_loopback }} {\n                        passive;\n                    }\n            {% for vlan in vrf_vlan.vlans %}\n                {% if vlan['vlan_name'] in ns.dev_vlan_list and \n                      vlan['member_of'] == ri['vrf_name'] %}\n                    {% if vlan['is_ospf'] %}\n                    interface irb.{{ vlan['vlan_id'] }};\n                    {% elif  vlan['irb_gateway6'] != '' %}\n                    interface irb.{{ vlan['vlan_id'] }} {\n                        passive;\n                    }\n                    {% endif %}\n                {% endif %}\n            {% endfor %}\n                }\n            }\n        {% endif %}\n        }\n    }\n    {% endfor %}\n{% endif %}\n{# That closes the leaf portion #}\n    {% if 'mgt_prefix_v6' in sys_prop and sys_prop.mgt_prefix_v6 != '' %}\n    {% set mgt_prefix_v6 = sys_prop.mgt_prefix_v6|to_network %}\n    {{ mgt_vrf }} {\n        routing-options {\n            rib {{ mgt_vrf }}.inet6.0 {\n                static {\n                    replace: route ::/0 next-hop {{ mgt_prefix_v6 }}1;\n                }\n            }\n        }\n    }\n    {% endif %}\n}\n\n{# EOF #}"
}