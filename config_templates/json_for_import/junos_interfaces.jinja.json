{
  "label": "junos_interfaces.jinja",
  "text": "{% set this_router = hostname %}\n{% set intf_prop = property_sets.get('interface_properties', {} ) %}\n{% set sys_prop = property_sets.get('custom_sys_properties', {} ) %}\n{% set loopback_prefix = function.get_resource_value(resources, 'loopback_assignments', 'fabric_resources', 'devices') %}\n{% if loopback_prefix != '' %}\n    {% if loopback_prefix|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff' \n       or loopback_prefix|to_netmask == 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:fffe' %}\n        {% set loopback_ipv6 = loopback_prefix %}\n    {% else %}\n        {% set loopback_ipv6 = loopback_prefix|replace( '::/', '::1/') %}\n    {% endif %}\n{% endif %}\n{% set esi_lags = namespace(esi_intfs={}, lacp_system_ids={}) %}\n{% set routing_instances = property_sets.get('vrf_vlan', {}).itervalues()|list %}\n{% set ns = namespace(dev_vlan_list = []) %}\n{% for interface_name, intf_resources in interface_resources.iteritems() %}\n    {% for resource in intf_resources if resource['label'] == 'lacp' %}\n        {% for r in resource['resources'] %}\n            {% if r.get('value') and r.get('label') == 'lacp_system_ids' %}\n                {% set esi_prefix = '00:01:00:00:' %}\n                {% set mac_address = '{:012X}'.format(r['value']|int) %}\n                {% set esi_address = esi_prefix + mac_address|to_mac_format('hyphen')|replace('-', ':') %}\n                {% do esi_lags.esi_intfs.update({interface_name: esi_address}) %}\n            {% endif %}\n            {% if r.get('value') and r.get('label') == 'lacp_system_ids' %}\n                {% set mac_address = '{:012X}'.format(r['value']|int + 10000) %}\n                {% set mac_address = mac_address|to_mac_format('hyphen')|replace('-', ':') %}\n                {% do esi_lags.lacp_system_ids.update({interface_name: mac_address}) %}\n            {% endif %}\n        {% endfor %}\n    {% endfor %}\n{% endfor %}\n{% set vlan_list = [] %}\n{% for ri_item in routing_instances %}\n    {% for key, value in ri_item.items() %}\n        {% if key == 'vlans' %}\n            {% for k, v in value.items() %}\n                {{ vlan_list.append(k) or \"\" }}\n            {% endfor %}\n        {% endif %}\n    {% endfor %}\n{% endfor %}\ninterfaces {\n{% for interface_name, iface in interfaces.iteritems() %}\n    replace: {{ interface_name }} {\n        description \"{{ iface['description'] }}\";\n    {# Is this a LAG member? #}\n    {% if iface.part_of %}\n        ether-options {\n            802.3ad {{ iface.part_of }};\n        }\n    }\n        {% continue %}\n    {% endif %}\n    {# Is this a LAG bundle (e.g., aeX interface)? #}\n    {% if iface.get('composed_of') %}\n        {% set esi_id = esi_lags.esi_intfs.get(interface_name) %}\n        {% set lacp_system_id = esi_lags.lacp_system_ids.get(interface_name) %}\n        {% if esi_id %}\n        esi {\n            {{esi_id}};\n            all-active;\n        }\n        {% endif %}\n        {% set lacp_mode = {'lacp_active': 'active', 'lacp_passive': 'passive'}.get(iface['lag_mode']) %}\n        {% if lacp_system_id %}\n        aggregated-ether-options {\n            lacp {\n                {{lacp_mode}};\n                system-id {{lacp_system_id}};\n            }\n        }\n        {% endif %}\n    {% endif %}\n    {# Is this a fabric link? #}\n    {% if iface['ipv6_address'] and iface['ipv6_prefixlen'] %}\n        mtu {{ intf_prop.fabric_intf_mtu }};\n        unit 0 {\n            family inet6 {\n                address {{ iface['ipv6_address'] }}/{{ iface['ipv6_prefixlen'] }};\n            }\n        }\n    {# Is this a host-facing interface? #}\n    {% elif 'mode_trunk' in iface.link_tags or 'mode_access' in iface.link_tags %}\n        {% set intf_mode = 'trunk' if 'mode_trunk' in iface.link_tags else 'access' %}\n        {% set intf_vlan_list = [] %}\n        {% for vlan in vlan_list %}\n            {% if vlan in iface.link_tags %}\n                {{ intf_vlan_list.append(vlan) or \"\" }}{{ ns.dev_vlan_list.append(vlan) or \"\" }}\n            {% endif %}\n        {% endfor%}\n        mtu {{ intf_prop.host_intf_mtu }};\n        unit 0 {\n            family ethernet-switching {\n            {% if intf_vlan_list %}\n                interface-mode {{intf_mode}};\n                vlan {\n                    members [ {% for vlan in intf_vlan_list %}{{ vlan }} {% endfor %}];\n                }\n            {% endif %}\n            }\n        }\n    {% else %}\n        unit 0;\n    {% endif %}\n    }\n{% endfor %}\n{# Now for the loopback interface #}\n{% if loopback_ipv6 %}\n    replace: lo0 {\n        unit 0 {\n            family inet6 {\n                address {{ loopback_ipv6 }};\n            }\n        }\n    {% if 'leaf' in system_tags %}\n        {% for ri in routing_instances %}\n            {% if ri.lo0_unit %}\n        unit {{ ri.lo0_unit }} {\n            family inet6;\n        }\n            {% endif %}\n        {% endfor %}  \n    {% endif %}  \n    }\n{% endif %}\n{# And now for the IRB interfaces #}\n{% if 'leaf' in system_tags %}\n    {% for ri in routing_instances %}\n        {% if loop.first %}\n    replace: irb {\n        {% endif %}\n    {% for vlan, vlan_items in ri.vlans.iteritems() %}\n        {% if vlan in ns.dev_vlan_list %}\n            {% if vlan_items.irb_gateway4 or vlan_items.irb_gateway6 %}\n        unit {{ vlan_items.vlan_id }} {\n        {# If the below test is true, we're using anycast addresses #}\n        {% if not ( vlan_items.irb_gateway4_a or\n                    vlan_items.irb_gateway4_b or\n                    vlan_items.irb_gateway6_a or\n                    vlan_items.irb_gateway6_b ) %}\n            mac 00:1c:73:00:00:01;\n            {% if vlan_items.irb_gateway4 %}\n            family inet {\n                mtu {{ intf_prop.irb_intf_mtu }};\n                address {{ vlan_items.irb_gateway4 }}/{{ vlan_items.ipv4_prefix_len }};\n            }\n            {% endif %}\n            {% if vlan_items.irb_gateway6 %}\n            family inet6 {\n                mtu {{ intf_prop.irb_intf_mtu }};\n                address {{ vlan_items.irb_gateway6 }}/{{ vlan_items.ipv6_prefix_len }};\n            }\n            {% endif %}\n        {# Otherwise we're using VGA #}\n        {% else %}\n            {% if vlan_items.irb_gateway4 %}\n            family inet {\n                mtu {{ intf_prop.irb_intf_mtu }};\n                {% set  gateway4 = vlan_items.irb_gateway4_a if 'gateway_A' in system_tags else vlan_items.irb_gateway4_b %}\n                address {{ gateway4}}/{{vlan_items.ipv4_prefix_len}} {\n                    virtual-gateway-address {{ vlan_items.irb_gateway4 }}\n                }\n            }\n            {% endif %}\n            {% if vlan_items.irb_gateway6 %}\n            family inet6 {\n                mtu {{ intf_prop.irb_intf_mtu }};\n                {% set  gateway6 = vlan_items.irb_gateway6_a if 'gateway_A' in system_tags else vlan_items.irb_gateway6_b %}\n                address {{ gateway6}}/{{vlan_items.ipv6_prefix_len}} {\n                    virtual-gateway-address {{ vlan_items.irb_gateway6 }}\n                }\n            }\n            {% endif %}\n        {% endif %}\n        }\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n        {% if loop.last %}\n    }\n        {% endif %}\n    {% endfor %}\n{% endif %}\n{# Adding IPv6 for em0 here.#}\n{% if 'mgt_prefix_v6' in sys_prop and sys_prop.mgt_prefix_v6 != '' %}\n    {% set mgt_prefix_v6 = sys_prop.mgt_prefix_v6|to_network %}\n    {% set mgt_v6_prefixlen = sys_prop.mgt_prefix_v6|to_prefixlen %}\n    em0 {\n        unit 0 {\n            family inet6 {\n                replace: address {{ mgt_prefix_v6 }}{{ management_ip }}/{{ mgt_v6_prefixlen }};\n            }\n        }\n    }\n{% endif %}\n}\n{# EOF #}"
}